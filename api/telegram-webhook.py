import os
import telebot
import json

TOKEN = os.environ["TOKEN"]
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))
bot = telebot.TeleBot(TOKEN)

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from urllib.parse import quote
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
)

GUIDE_DATA = {
    'food': {
        'title': 'üçΩÔ∏è –á–∂–∞',
        'menu_text': '–•–æ—á–µ—à —â–æ—Å—å —Å–º–∞—á–Ω–µ–Ω—å–∫–µ? –û—Å—å —â–æ –º–æ–∂—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏:',
        'sub_menu': {
            'breakfast': ('–°–Ω—ñ–¥–∞–Ω–∫–∏ —Ç–∞ –±—Ä–∞–Ω—á—ñ', '*Cam√©lia Brunch Garden* ‚Äì –≤–∏—Å–æ–∫—ñ –æ—Ü—ñ–Ω–∫–∏, –∑–∞—Ç–∏—à–Ω–∏–π —Å–∞–¥\n*Do Norte Caf√©* ‚Äì –ø–æ–ø—É–ª—è—Ä–Ω–æ —Å–µ—Ä–µ–¥ —Ç—É—Ä–∏—Å—Ç—ñ–≤ —Ç–∞ –º—ñ—Å—Ü–µ–≤–∏—Ö\n*Eleven Lab Concept* ‚Äì –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ –±—Ä–∞–Ω—á—ñ, Instagram‚Äë–¥—Ä—É–∂–Ω—è –∑–æ–Ω–∞'),
            'traditional': ('–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞ —ó–∂–∞', '*O Buraco* ‚Äì —Ç—Ä—ñ–ø–∞—Å –ø–æ‚Äë–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å—å–∫–∏, –¥–æ–º–∞—à–Ω—ñ —Å—Ç—Ä–∞–≤–∏\n*A Cozinha do Manel* ‚Äì –∫–ª–∞—Å–∏—á–Ω–∏–π –ø–æ—Ä—Ç—É–≥–∞–ª. –æ–±—ñ–¥\n*Taberna Dos Mercadores* ‚Äì —ñ–Ω—Ç–∏–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞ –∫—É—Ö–Ω—è'),
            'nata': ('–ü–∞—à—Ç–µ–ª –¥–µ –Ω–∞—Ç–∞', '*Manteigaria* ‚Äì –±–µ–∑–¥–æ–≥–∞–Ω–Ω—ñ –∫—Ä–µ–º‚Äë–ø–∏—Ä—ñ–∂–∫–∏\n*Castro ‚Äì Atelier de Past√©is de Nata* ‚Äì –æ–¥–∏–Ω –∑ –Ω–∞–π–∫—Ä–∞—â–∏—Ö —É –º—ñ—Å—Ç—ñ\n*F√°brica da Nata* ‚Äì –ø–æ–ø—É–ª—è—Ä–Ω–µ, –±–ª–∏–∑—å–∫–æ –¥–æ –ë–æ–ª—è–Ω—å–æ'),
            'bars': ('–ë–∞—Ä–∏ —ñ –ø–∞–±–∏', '*Letraria Craft Beer Garden* ‚Äì –ø–æ–Ω–∞–¥ 50 —Å–æ—Ä—Ç—ñ–≤ –∫—Ä–∞—Ñ—Ç—É\n*Catraio* ‚Äì –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π –ø–∞–± —ñ–∑ 130+ –ø—ñ–Ω—Ç–∞–º–∏\n*Bar Santa Cachaca* ‚Äì –∫–ª–∞—Å–∏—á–Ω—ñ –∫–æ–∫—Ç–µ–π–ª—ñ, –¥—Ä—É–∂–Ω—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'),
            'dinner': ('–í–µ—á–µ—Ä—è', '*Ode Porto Wine House* ‚Äì —Ä–æ–º–∞–Ω—Ç–∏–∫–∞, –ø–æ—Ä—Ç—É–≥–∞–ª. –∫—É—Ö–Ω—è\n*Casa de Ch√° da Boa Nova* ‚Äì –º–æ—Ä—Å—å–∫—ñ –∫—Ä–∞—î–≤–∏–¥–∏, –º—ñ—à–ª–µ–Ω—ñ–≤—Å—å–∫–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞\n*Taberna Dos Mercadores* ‚Äì –≤–µ—á—ñ—Ä–Ω—è –∫–ª–∞—Å–∏–∫–∞'),
            'vegan': ('–í–µ–≥–∞–Ω—Å—å–∫—ñ –º—ñ—Å—Ü—è', '*Apuro Vegan Bar* ‚Äì —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∏–π –≤–µ–≥–∞–Ω‚Äë–±–∞—Ä\n*Ess√™ncia Restaurante Vegetariano* ‚Äì –∑–∞—Ç–∏—à–Ω–æ —ñ —Å–º–∞—á–Ω–æ\n*√Årvore do Mundo* ‚Äì –±–ª–∏–∑—å–∫–∏–π —Ñ—É–ª‚Äë–≤–µ–≥–∞–Ω, —Ç–≤–æ—Ä—á–∏–π –¥–∏–∑–∞–π–Ω'),
        }
    },
    'viewpoints': ('üåÖ –í'—é–ø–æ–π–Ω—Ç—Å', '–û—Å—å —Ç–æ–ø‚Äë3 —Ç–æ—á–∫–∏ –¥–ª—è –∑–∞—Ö–æ–¥—É —Å–æ–Ω—Ü—è:\n*Jardim do Morro (Gaia)* ‚Äì –∫–ª–∞—Å–∏–∫–∞ –¥–ª—è sunset\n*Mosteiro da Serra do Pilar* ‚Äì –Ω–µ–æ—Ü–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –≤–∏–¥ –Ω–∞ –º—ñ—Å—Ç–æ\n*Jardins do Pal√°cio de Crist–∞–ª* ‚Äì –ø–∞–Ω–æ—Ä–∞–º–∞ —Ç–∞ —Ä–æ–º–∞–Ω—Ç–∏–∫–∞'),
    'workspaces': ('üßë‚Äçüíª –ú—ñ—Å—Ü—è –¥–ª—è —Ä–æ–±–æ—Ç–∏', '–í—ñ–¥–¥–∞–ª–µ–Ω–æ –ø–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏? –û—Å—å —Ç–æ–ø‚Äë3:\n*C'alma Coffee Room* ‚Äì –¥–æ–±—Ä–∏–π Wi‚ÄëFi, –∫–∞–≤–æ–≤–∞ –µ–Ω–µ—Ä–≥—ñ—è\n*Negra Caf√©* ‚Äì —Å—Ç–∏–ª—å–Ω–æ, –≤–∞–ª—ñ–¥ –¥–ª—è –Ω–æ—É—Ç–±—É–∫—É\n*Outsite Cowork Caf√©* ‚Äì –ø—Ä–æ—Å—Ç—ñ—Ä –∑ –∫–∞–±—ñ–Ω–∫–∞–º–∏ —Ç–∞ –∑—É—Å—Ç—Ä—ñ—á–∫–∞–º–∏'),
    'winebars': ('üç∑ –í–∏–Ω–Ω—ñ –±–∞—Ä–∏', '*Portologia ‚Äì La Maison des Port* ‚Äì –¥–µ–≥—É—Å—Ç–∞—Ü—ñ—è, —Å–∏—Ä–∏, Gaia\n*Dick's Bar (–≤ The Yeatman Hotel)* ‚Äì –º—ñ—Å—Ç–∏—á–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –≤–∏–¥ –Ω–∞ –î–æ—Ä—É\n*A Cave Do Bon Vivant* ‚Äì –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ñ –≤–∏–Ω–∞, —Å–ø–æ–∫—ñ–π–Ω–∞ –∫–∞–º–µ—Ä–Ω—ñ—Å—Ç—å'),
    'beaches': ('üèñÔ∏è –ü–ª—è–∂—ñ', '*Praia dos Ingleses (Foz)* ‚Äì –∫–∞—Ñ–µ –Ω–∞ "–ø–∞–ª—å—è—Ö"\n*Piscinas de Mar√©s, Le√ßa da Palmeira* ‚Äì –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω—ñ –±–∞—Å–µ–π–Ω–∏ –°–∏–∑–∞\n*Praia do Senhor da Pedra (Miramar)* ‚Äì —Å–∫–µ–ª—è + —Ä–µ–ª–∞–∫—Å'),
    'trails': ('ü•æ –í–æ–ª–∫—ñ–Ω —Ç—Ä–µ–π–ª–∏', '*Porto City Walk (~7 –∫–º)* ‚Äì –ø–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –≤—É–ª–∏—Ü—è—Ö —ñ –Ω–∞–±–µ—Ä–µ–∂–Ω—ñ–π\n*Ribeira ‚Üí Gaia ‚Üí Miradouro trail* ‚Äì —á–µ—Ä–µ–∑ –º—ñ—Å—Ç–æ –¥–æ Gaia viewpoint\n*Serra do Porto Park Trails* ‚Äì –∑–µ–ª–µ–Ω—å —ñ –ø—Ä–∏—Ä–æ–¥–∞ –∑–∞ –º—ñ—Å—Ç–æ–º'),
    'sights': ('üèõÔ∏è –í–∏–∑–Ω–∞—á–Ω—ñ –º—ñ—Å—Ü—è', '*Dom Lu√≠s I Bridge* ‚Äì —ñ–∫–æ–Ω–∞ –ü–æ—Ä—Ç–æ, –ø—ñ—à–æ—Ö—ñ–¥–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥\n*Cl√©rigos Tower* ‚Äì –ø—ñ–¥–π–æ–º –Ω–∞ –ø–∞–Ω–æ—Ä–∞–º–Ω—É –≤–µ–∂—É\n*S√£o Bento Station* ‚Äì –∞–∑—É–ª–µ–∂—É‚Äë–º—É–∑–µ–π –Ω–∞ –≤–æ–∫–∑–∞–ª—ñ'),
    'stay': ('üõèÔ∏è –î–µ –∑—É–ø–∏–Ω–∏—Ç–∏—Å—å', '*Hospes Infante Sagres* ‚Äì –±—É—Ç—ñ–∫‚Äë–≥–æ—Ç–µ–ª—å, —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ, –∑—è—Ç–Ω–∏–π —Å–Ω—ñ–¥–∞–Ω–æ–∫\n*The Yeatman Hotel* ‚Äì –ª—é–∫—Å —ñ–∑ –≤–∏–¥–æ–º, –≤–∏–Ω–Ω–∏–π –±–∞—Ä\n*PortoBay Flores* ‚Äì —Å—Ç–∏–ª—å–Ω–∏–π, –Ω–µ–¥–∞–ª–µ–∫–æ –≤—ñ–¥ —Å—Ç–∞—Ä–æ–≥–æ –º—ñ—Å—Ç–∞'),
}

def create_maps_link(place_name):
    base_url = "https://www.google.com/maps/search/?api=1&query="
    query = quote(f"{place_name}, Porto")
    return f"[{place_name}]({base_url}{query})"

def format_content(content_string):
    lines = content_string.split('\n')
    formatted_lines = [f"üìç {create_maps_link(line.strip('*').split('‚Äì')[0].strip())} {'‚Äì' + '‚Äì'.join(line.strip('*').split('‚Äì')[1:]) if '‚Äì' in line else ''}" if line.startswith('*') else line for line in lines]
    return '\n'.join(formatted_lines)

def gen_main_menu():
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(data['title'] if isinstance(data, dict) else data[0], callback_data=f"main_{key}") for key, data in GUIDE_DATA.items()]
    markup.add(*buttons)
    return markup

def gen_food_submenu():
    markup = InlineKeyboardMarkup(row_width=1)
    buttons = [InlineKeyboardButton(data[0], callback_data=f"sub_food_{key}") for key, data in GUIDE_DATA['food']['sub_menu'].items()]
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} (ID: {message.from_user.id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ /start")
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–•–æ—á—É –≥–∞–π–¥ –ø–æ –ü–æ—Ä—Ç–æ", callback_data="show_main_menu"))
        welcome_text = "–ü—Ä–∏–≤—ñ—Ç! –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É - —Ç–≤—ñ–π –≥—ñ–¥ –ø–æ –ü–æ—Ä—Ç–æ –≤—ñ–¥ –Ω–∞—Å –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π!"
        photo_url = os.environ.get("WELCOME_IMAGE_URL", "")
        if photo_url:
            bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_url,
                caption=welcome_text,
                reply_markup=markup
            )
        else:
            bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
    except Exception as e:
        logging.error(f"–ü–û–ú–ò–õ–ö–ê –≤ send_welcome: {e}", exc_info=True)
        if ADMIN_ID:
            bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ /start:\n\n`{e}`", parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    try:
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.first_name} (ID: {call.from_user.id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '{call.data}'")
        bot.answer_callback_query(call.id)
        if call.data == 'show_main_menu':
            bot.send_message(call.message.chat.id, "–©–æ —Å–∞–º–µ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å —É –ü–æ—Ä—Ç–æ?", reply_markup=gen_main_menu())
            return
        parts = call.data.split('_')
        menu_type, category = parts[0], parts[1]
        if menu_type == 'main':
            if category == 'food':
                bot.send_message(call.message.chat.id, GUIDE_DATA['food']['menu_text'], reply_markup=gen_food_submenu())
            else:
                title, content = GUIDE_DATA[category]
                bot.send_message(call.message.chat.id, f"*{title}*\n\n{format_content(content)}", parse_mode='Markdown')
        elif menu_type == 'sub' and category == 'food':
            sub_category = parts[2]
            title, content = GUIDE_DATA['food']['sub_menu'][sub_category]
            bot.send_message(call.message.chat.id, f"*{title}*\n\n{format_content(content)}", parse_mode='Markdown')
    except Exception as e:
        logging.error(f"–ü–û–ú–ò–õ–ö–ê –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É –∫–Ω–æ–ø–æ–∫: {e}", exc_info=True)
        if ADMIN_ID:
            bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ '{call.data}':\n\n`{e}`", parse_mode='Markdown')

@bot.message_handler(commands=['reply'])
def reply_to_user(message):
    if message.from_user.id != ADMIN_ID:
        logging.warning(f"–°–ø—Ä–æ–±–∞ –Ω–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ /reply –≤—ñ–¥ user ID: {message.from_user.id}")
        return
    try:
        parts = message.text.split(maxsplit=2)
        target_user_id, reply_text = int(parts[1]), parts[2]
        bot.send_message(target_user_id, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n\n{reply_text}")
        bot.reply_to(message, f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}.")
        logging.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {ADMIN_ID}) –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}.")
    except Exception as e:
        bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–±–æ –ø–æ–º–∏–ª–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /reply <ID> <—Ç–µ–∫—Å—Ç>")
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /reply: {e}")

def handler(request, response):
    if request.method == "POST":
        length = int(request.headers.get("content-length", 0))
        body = request.body.read(length)
        update = telebot.types.Update.de_json(body.decode("utf-8"))
        bot.process_new_updates([update])
        response.status_code = 200
        response.body = b"ok"
        return response
    else:
        response.status_code = 405
        response.body = b"Method Not Allowed"
        return response
